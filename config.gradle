ext {
    androidConfig = [
            compileVersion : 28,
            minVersion     : 15,
            targetVersion  : 28,
            releaseProguard: true,
            debugProguard  : true
    ]

    /**
     * 上传配置
     */
    publishConfig = [
            userOrg: 'zhuliyuan',//bintray.com用户名
            groupId: 'com.rocketzly',//jcenter上的路径
            desc   : '一个组件初始化辅助工具',//描述，自由填写
            website: 'https://github.com/RocketZLY/ComponentInitializer' // 网址，自由填写
    ]

    /**
     * 模块调试配置
     */
    debugConfig = [
            ComponentInitializerApi      : false,
            ComponentInitializerCommon   : false,
            ComponentInitializerProcessor: false
    ]

    libsVersion = [
            appcompat                    : '28.0.0',
            auto_service                 : '1.0-rc2',
            javapoet                     : '1.11.1',
            componentinitializer_api     : '1.0.1',
            componentinitializer_compiler: '1.0.1',
            componentinitializer_common  : '1.0.0'
    ]

    libs = [
            kotlin                       : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version",
            appcompat_v7                 : "com.android.support:appcompat-v7:$libsVersion.appcompat",
            auto_service                 : "com.google.auto.service:auto-service:$libsVersion.auto_service",
            javapoet                     : "com.squareup:javapoet:$libsVersion.javapoet",
            componentinitializer_api     : debugConfig.ComponentInitializerApi ? project(':ComponentInitializerApi') : "com.rocketzly:componentinitializer-api:$libsVersion.componentinitializer_api",
            componentinitializer_common  : debugConfig.ComponentInitializerCommon ? project(':ComponentInitializerCommon') : "com.rocketzly:componentinitializer-common:$libsVersion.componentinitializer_common",
            componentinitializer_compiler: debugConfig.ComponentInitializerProcessor ? project(':ComponentInitializerProcessor') : "com.rocketzly:componentinitializer-compiler:$libsVersion.componentinitializer_compiler"
    ]

    /**
     * app模块依赖关系
     */
    appDependencies = [
            implementation: [
                    libs.kotlin,
                    project(':common'),
                    project(':moduleA'),
                    project(':moduleB'),
                    project(':moduleC')
            ]
    ]

    /**
     * common模块依赖关系
     */
    commonDependencies = [
            api: [
                    libs.appcompat_v7,
                    libs.componentinitializer_api
            ]
    ]

    /**
     * ComponentInitializerApi模块依赖关系
     */
    ComponentInitializerApiDependencies = [
            api: [
                    libs.componentinitializer_common
            ]
    ]

    /**
     * ComponentInitializerProcessor模块依赖关系
     */
    ComponentInitializerProcessorDependencies = [
            implementation: [
                    libs.auto_service,
                    libs.javapoet,
                    libs.componentinitializer_common
            ]
    ]

    /**
     * sampleModule 样例module依赖关系
     */
    sampleModuleDependencies = [
            implementation     : [
                    project(':common')
            ],
            annotationProcessor: [
                    libs.componentinitializer_compiler
            ]
    ]

    /**
     * 生成模块依赖关系
     */
    generateDependencies = { handler, moduleDependencies ->
        moduleDependencies.each { relation, libs ->
            libs.each {
                switch (relation) {
                    case "implementation":
                        handler.implementation it
                        break
                    case "api":
                        handler.api it
                        break
                    case "annotationProcessor":
                        handler.annotationProcessor it
                        break
                }
            }
        }
    }

}